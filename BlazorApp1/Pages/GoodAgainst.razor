@page "/goodagainst"
@using PokeApiNet

<PageTitle>Pokemon Type Guesser</PageTitle>

<meta http-equiv="ScreenOrientation" content="autoRotate:disabled">

<style>
    .typesContainer {
        display: grid;
        grid-template-areas:
            "type1 type2";
        grid-template-columns: 1fr 1fr;
    }

        .typesContainer > div {
            background-color: white;
            align-items: center;
            height: 50px;
            line-height: 50px;
            color: white;
            text-align: center;
            border: 1px solid black;
            font-weight: bold;
        }
        
            .typesContainer > div.type1 {
                grid-area: type1;
            }

            .typesContainer > div.type2 {
                grid-area: type2;
            }

    .container {
        display: grid;
        grid-template-areas:
            "pic buttons"
            "name name"
            "types types"
            "guesses guesses";
        grid-template-columns: 3fr 1fr;
        gap: 5px;
        background-color: white;
        padding: 5px;
    }

        .container > div {
            background-color: white;
            padding: 10px;
        }

            .container > div.pic {
                grid-area: pic;
                text-align: center;
            }

            .container > div.name {
                grid-area: name;
                text-align: center;
            }

            .container > div.buttons {
                grid-area: buttons;
            }

            .container > div.types {
                grid-area: types;
            }

            .container > div.guesses {
                grid-area: guesses;
            }

    body{
        background-color: white;
        font-family: Arial;
        overflow: auto;
    }

    .imgClass {
        min-width: 100px;
        max-width: 400px;
        min-height: 100px;
        max-height: 400px;
    }

    .div-table {
        display: table;
        width: auto;
    }

    .div-table-row {
        display: table-row;
        width: auto;
        clear: both;
    }

    .div-table-col {
        float: left; /* fix for  buggy browsers */
        display: table-column;
        width: 200px;
        color: white;
        border: 1px solid black;
        font-weight: bold;
        height: 50px;
        line-height: 50px;
    }

    .buttonClass {
        height: 100px;
        width: 100px;
    }
</style>

<div class="container">
    <div class="pic">
        @if (QuadDamageTypes?.Any() == true)
        {
            <div>4x damage from:</div>
            @foreach (var quadType in QuadDamageTypes)
            {
                <div class="type" style="@GetTypeStyle(quadType)">@quadType</div>
            }
        }

        @if (DoubleDamageTypes?.Any() == true)
        {
            <div>2x damage from:</div>
            @foreach (var DoubType in DoubleDamageTypes)
            {
                <div class="type" style="@GetTypeStyle(DoubType)">@DoubType</div>
            }
        }
    </div>
    <div class="buttons">
        <button class="buttonClass" disabled="@GetClearButtonDisabled()" @onclick="@(() => Clear())">
            Clear
        </button>
    </div>
    <div class="types">
        <div class="typesContainer">
            @if (SelectedPokemonType1 is not null)
            {
                <div class="type1" style="background-color:@TypeColorDictionary[@SelectedPokemonType1]">@SelectedPokemonType1</div>
            }
                
            @if(SelectedPokemonType2 is not null)
            {
                <div class="type2" style="background-color:@TypeColorDictionary[@SelectedPokemonType2]">@SelectedPokemonType2</div>
            }
        </div>
    </div>
    <div class="guesses">
        <div class="div-table">
            <div class="div-table-row">
                <div class="div-table-col" align="center" disabled="@GetTypeButtonDisabled()" style="@GetTypeStyleForGuessing("BUG")" onclick="@(() => GuessType("BUG"))">BUG</div>
                <div class="div-table-col" align="center" disabled="@GetTypeButtonDisabled()" style="@GetTypeStyleForGuessing("DARK")" onclick="@(() => GuessType("DARK"))">DARK</div>
                <div class="div-table-col" align="center" disabled="@GetTypeButtonDisabled()" style="@GetTypeStyleForGuessing("DRAGON")" onclick="@(() => GuessType("DRAGON"))">DRAGON</div>
                <div class="div-table-col" align="center" disabled="@GetTypeButtonDisabled()" style="@GetTypeStyleForGuessing("ELECTRIC")" onclick="@(() => GuessType("ELECTRIC"))">ELECTRIC</div>
                <div class="div-table-col" align="center" disabled="@GetTypeButtonDisabled()" style="@GetTypeStyleForGuessing("FAIRY")" onclick="@(() => GuessType("FAIRY"))">FAIRY</div>
                <div class="div-table-col" align="center" disabled="@GetTypeButtonDisabled()" style="@GetTypeStyleForGuessing("FIGHTING")" onclick="@(() => GuessType("FIGHTING"))">FIGHTING</div>
                <div class="div-table-col" align="center" disabled="@GetTypeButtonDisabled()" style="@GetTypeStyleForGuessing("FIRE")" onclick="@(() => GuessType("FIRE"))">FIRE</div>
                <div class="div-table-col" align="center" disabled="@GetTypeButtonDisabled()" style="@GetTypeStyleForGuessing("FLYING")" onclick="@(() => GuessType("FLYING"))">FLYING</div>
                <div class="div-table-col" align="center" disabled="@GetTypeButtonDisabled()" style="@GetTypeStyleForGuessing("GHOST")" onclick="@(() => GuessType("GHOST"))">GHOST</div>
                <div class="div-table-col" align="center" disabled="@GetTypeButtonDisabled()" style="@GetTypeStyleForGuessing("GRASS")" onclick="@(() => GuessType("GRASS"))">GRASS</div>
                <div class="div-table-col" align="center" disabled="@GetTypeButtonDisabled()" style="@GetTypeStyleForGuessing("GROUND")" onclick="@(() => GuessType("GROUND"))">GROUND</div>
                <div class="div-table-col" align="center" disabled="@GetTypeButtonDisabled()" style="@GetTypeStyleForGuessing("ICE")" onclick="@(() => GuessType("ICE"))">ICE</div>
                <div class="div-table-col" align="center" disabled="@GetTypeButtonDisabled()" style="@GetTypeStyleForGuessing("NORMAL")" onclick="@(() => GuessType("NORMAL"))">NORMAL</div>
                <div class="div-table-col" align="center" disabled="@GetTypeButtonDisabled()" style="@GetTypeStyleForGuessing("POISON")" onclick="@(() => GuessType("POISON"))">POISON</div>
                <div class="div-table-col" align="center" disabled="@GetTypeButtonDisabled()" style="@GetTypeStyleForGuessing("PSYCHIC")" onclick="@(() => GuessType("PSYCHIC"))">PSYCHIC</div>
                <div class="div-table-col" align="center" disabled="@GetTypeButtonDisabled()" style="@GetTypeStyleForGuessing("ROCK")" onclick="@(() => GuessType("ROCK"))">ROCK</div>
                <div class="div-table-col" align="center" disabled="@GetTypeButtonDisabled()" style="@GetTypeStyleForGuessing("STEEL")" onclick="@(() => GuessType("STEEL"))">STEEL</div>
                <div class="div-table-col" align="center" disabled="@GetTypeButtonDisabled()" style="@GetTypeStyleForGuessing("WATER")" onclick="@(() => GuessType("WATER"))">WATER</div>
            </div>
        </div>
    </div>
</div>

@code {
    private static PokeApiClient pokeApiClient = new PokeApiClient();

    private string? SelectedPokemonType1;
    private string? SelectedPokemonType2;

    private PokeApiNet.Type? SelectedPokemonActualType1;
    private PokeApiNet.Type? SelectedPokemonActualType2;

    private bool GetClearButtonDisabled()
    {
        return SelectedPokemonType1 is null && SelectedPokemonType2 is null;
    }

    private bool GetTypeButtonDisabled()
    {
        return SelectedPokemonType1 is not null && SelectedPokemonType2 is not null;
    }

    private List<string> DoubleDamageTypes = [];
    private List<string> QuadDamageTypes = [];

    private static Dictionary<string, string> TypeColorDictionary = new ()
        {
            { "BUG", "#91A119" },
            { "DARK", "#624D4E" },
            { "DRAGON", "#5060E1" },
            { "ELECTRIC", "#FAC000" },
            { "FAIRY", "#EF70EF" },
            { "FIGHTING", "#FF8000" },
            { "FIRE", "#E62829" },
            { "FLYING", "#81B9EF" },
            { "GHOST", "#704170" },
            { "GRASS", "#3FA129" },
            { "GROUND", "#915121" },
            { "ICE", "#3DCEF3" },
            { "NORMAL", "#9FA19F" },
            { "POISON", "#9141CB" },
            { "PSYCHIC", "#EF4179" },
            { "ROCK", "#AFA981" },
            { "STEEL", "#60A1B8" },
            { "WATER", "#2980EF" },
        };

    private static Random rnd = new Random();

    private const int maxPokemonId = 1025;

    private bool _gettingNextPokemon = false;

    private void Clear()
    {
        SelectedPokemonActualType1 = null;
        SelectedPokemonType1 = null;
        SelectedPokemonActualType2 = null;
        SelectedPokemonType2 = null;
        DoubleDamageTypes.Clear();
        QuadDamageTypes.Clear();
    }

    private async Task GuessType(string type)
    {
        if (SelectedPokemonActualType1 is null)
        {
            SelectedPokemonActualType1 = await pokeApiClient.GetResourceAsync<PokeApiNet.Type>(type);

            if (SelectedPokemonActualType1 is not PokeApiNet.Type actualType)
            {
                return;
            }

            SelectedPokemonType1 = type;

            foreach (var typeName in actualType.DamageRelations.DoubleDamageFrom)
            {
                var upperName = typeName.Name.ToUpperInvariant();
                DoubleDamageTypes.Add(upperName);
            }
        }
        else if (SelectedPokemonActualType2 is null)
        {
            SelectedPokemonActualType2 = await pokeApiClient.GetResourceAsync<PokeApiNet.Type>(type);

            if (SelectedPokemonActualType2 is not PokeApiNet.Type actualType)
            {
                return;
            }

            SelectedPokemonType2 = type;

            List<string> typeOneReducedDamageFrom = [.. SelectedPokemonActualType1.DamageRelations.HalfDamageFrom.Select(t => t.Name.ToUpperInvariant()), .. SelectedPokemonActualType1.DamageRelations.NoDamageFrom.Select(t => t.Name.ToUpperInvariant())];
            List<string> typeTwoReducedDamageFrom = [.. actualType.DamageRelations.HalfDamageFrom.Select(t => t.Name.ToUpperInvariant()), .. actualType.DamageRelations.NoDamageFrom.Select(t => t.Name.ToUpperInvariant())];
            List<string> typeTwoIncreasedDamageFrom = [.. actualType.DamageRelations.DoubleDamageFrom.Select(t => t.Name.ToUpperInvariant())];

            foreach (var typeName in typeOneReducedDamageFrom)
            {
                typeTwoIncreasedDamageFrom.Remove(typeName);
            }

            foreach (var typeName in typeTwoReducedDamageFrom)
            {
                DoubleDamageTypes.Remove(typeName);
            }

            foreach (var typeName in typeTwoIncreasedDamageFrom)
            {
                if (DoubleDamageTypes.Contains(typeName))
                {
                    DoubleDamageTypes.Remove(typeName);
                    QuadDamageTypes.Add(typeName);
                }
                else
                {
                    DoubleDamageTypes.Add(typeName);
                }
            }
        }
    }

    private string GetTypeStyle(string type)
    {
        return $"background-color: {TypeColorDictionary[type]}";
    }

    private string GetTypeStyleForGuessing(string type)
    {
        if (GetTypeButtonDisabled())
        {
            return "background-color: White; color: Black";
        }

        return GetTypeStyle(type);
    }
}