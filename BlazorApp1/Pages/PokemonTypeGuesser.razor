@page "/"
@using PokeApiNet

<PageTitle>Pokemon Type Guesser</PageTitle>

<style>
    .typesContainer {
        display: grid;
        grid-template-areas:
            "type1 type2";
        grid-template-columns: 1fr 1fr;
    }

        .typesContainer > div {
            background-color: white;
            align-items: center;
            height: 50px;
            line-height: 50px;
            color: black;
            text-align: center;
            border: 1px solid black;
            font-weight: bold;
        }
        
            .typesContainer > div.type1 {
                grid-area: type1;
            }

            .typesContainer > div.type2 {
                grid-area: type2;
            }

    .container {
        display: grid;
        grid-template-areas:
            "pic buttons"
            "name name"
            "types types"
            "guesses guesses";
        grid-template-columns: 3fr 1fr;
        gap: 5px;
        background-color: white;
        padding: 5px;
    }

        .container > div {
            background-color: white;
            padding: 10px;
        }

            .container > div.pic {
                grid-area: pic;
                text-align: center;
            }

            .container > div.name {
                grid-area: name;
                text-align: center;
            }

            .container > div.buttons {
                grid-area: buttons;
            }

            .container > div.types {
                grid-area: types;
            }

            .container > div.guesses {
                grid-area: guesses;
            }

    body{
        background-color: white;
        font-family: Arial;
        overflow: auto;
    }

    .imgClass {
        min-width: 100px;
        max-width: 400px;
        min-height: 100px;
        max-height: 400px;
    }

    .div-table {
        display: table;
        width: auto;
    }

    .div-table-row {
        display: table-row;
        width: auto;
        clear: both;
    }

    .div-table-col {
        float: left; /* fix for  buggy browsers */
        display: table-column;
        width: 200px;
        border: 1px solid black;
        font-weight: bold;
        height: 50px;
        line-height: 50px;
    }

    .buttonClass {
        height: 100px;
        width: 100px;
    }
</style>

@if (SelectedPokemon is null)
{
    <h1>Loading...</h1>
}
else
{
    <div class="container">
        <div class="pic">
            <img src="@SelectedPokemonImageUrl" />
        </div>
        <div class="name">
            <h1>@SelectedPokemonName</h1>
        </div>
        <div class="buttons">
            <button class="buttonClass" disabled="@GetButtonDisabled(true)" @onclick="@(() => NextPokemon(false))">
                Next
            </button>

            <br />
            <br />

            <button class="buttonClass" disabled="@GetButtonDisabled(false)" @onclick="@(() => GiveUp())">
                Give Up
            </button>
        </div>
        <div class="types">
            <div class="typesContainer">
                <div class="type1" style="@GetTypeStylePotentiallyHidden(SelectedPokemonType1)">@GetTypeNamePotentiallyHidden(SelectedPokemonType1, true)</div>
                
                <div class="type2" style="@GetTypeStylePotentiallyHidden(SelectedPokemonType2)">@GetTypeNamePotentiallyHidden(SelectedPokemonType2, false)</div>
            </div>
        </div>
        <div class="guesses">
            <div class="div-table">
                <div class="div-table-row">
                    <div class="div-table-col" align="center" style="@GetTypeStyleForGuessing("BUG")" onclick="@(() => GuessType("BUG"))">BUG</div>
                    <div class="div-table-col" align="center" style="@GetTypeStyleForGuessing("DARK")" onclick="@(() => GuessType("DARK"))">DARK</div>
                    <div class="div-table-col" align="center" style="@GetTypeStyleForGuessing("DRAGON")" onclick="@(() => GuessType("DRAGON"))">DRAGON</div>
                    <div class="div-table-col" align="center" style="@GetTypeStyleForGuessing("ELECTRIC")" onclick="@(() => GuessType("ELECTRIC"))">ELECTRIC</div>
                    <div class="div-table-col" align="center" style="@GetTypeStyleForGuessing("FAIRY")" onclick="@(() => GuessType("FAIRY"))">FAIRY</div>
                    <div class="div-table-col" align="center" style="@GetTypeStyleForGuessing("FIGHTING")" onclick="@(() => GuessType("FIGHTING"))">FIGHTING</div>
                    <div class="div-table-col" align="center" style="@GetTypeStyleForGuessing("FIRE")" onclick="@(() => GuessType("FIRE"))">FIRE</div>
                    <div class="div-table-col" align="center" style="@GetTypeStyleForGuessing("FLYING")" onclick="@(() => GuessType("FLYING"))">FLYING</div>
                    <div class="div-table-col" align="center" style="@GetTypeStyleForGuessing("GHOST")" onclick="@(() => GuessType("GHOST"))">GHOST</div>
                    <div class="div-table-col" align="center" style="@GetTypeStyleForGuessing("GRASS")" onclick="@(() => GuessType("GRASS"))">GRASS</div>
                    <div class="div-table-col" align="center" style="@GetTypeStyleForGuessing("GROUND")" onclick="@(() => GuessType("GROUND"))">GROUND</div>
                    <div class="div-table-col" align="center" style="@GetTypeStyleForGuessing("ICE")" onclick="@(() => GuessType("ICE"))">ICE</div>
                    <div class="div-table-col" align="center" style="@GetTypeStyleForGuessing("NORMAL")" onclick="@(() => GuessType("NORMAL"))">NORMAL</div>
                    <div class="div-table-col" align="center" style="@GetTypeStyleForGuessing("POISON")" onclick="@(() => GuessType("POISON"))">POISON</div>
                    <div class="div-table-col" align="center" style="@GetTypeStyleForGuessing("PSYCHIC")" onclick="@(() => GuessType("PSYCHIC"))">PSYCHIC</div>
                    <div class="div-table-col" align="center" style="@GetTypeStyleForGuessing("ROCK")" onclick="@(() => GuessType("ROCK"))">ROCK</div>
                    <div class="div-table-col" align="center" style="@GetTypeStyleForGuessing("STEEL")" onclick="@(() => GuessType("STEEL"))">STEEL</div>
                    <div class="div-table-col" align="center" style="@GetTypeStyleForGuessing("WATER")" onclick="@(() => GuessType("WATER"))">WATER</div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private static PokeApiClient pokeApiClient = new PokeApiClient();

    private Pokemon? SelectedPokemon;
    private string? SelectedPokemonName;
    private string? SelectedPokemonImageUrl;
    private string? SelectedPokemonType1;
    private string? SelectedPokemonType2;

    private bool GetButtonDisabled(bool next)
    {
        return next != IsComplete();
    }

    private bool IsComplete()
    {
        if (SelectedPokemonType1 is not null)
        {
            bool twoIsGood = true;
            if (SelectedPokemonType2 is not null)
            {
                twoIsGood = GuessedTypes.Contains(SelectedPokemonType2);
            }

            if (GuessedTypes.Contains(SelectedPokemonType1) && twoIsGood)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        return true;
    }

    private List<string> GuessedTypes = [];

    private static Dictionary<string, string> TypeColorDictionary = new ()
        {
            { "FAIRY", "pink" },
            { "FIGHTING", "red" },
            { "FLYING", "lightskyblue" },
            { "POISON", "purple" },
            { "GROUND", "saddlebrown" },
            { "ROCK", "brown" },
            { "BUG", "lawngreen" },
            { "GHOST", "mediumpurple" },
            { "STEEL", "lightgray" },
            { "FIRE", "orange" },
            { "WATER", "royalblue" },
            { "GRASS", "green" },
            { "ELECTRIC", "yellow" },
            { "PSYCHIC", "magenta" },
            { "ICE", "cyan" },
            { "DRAGON", "gold" },
            { "DARK", "darkslategray" },
            { "NORMAL", "ivory" },
        };

    private static Random rnd = new Random();

    private const int maxPokemonId = 1025;

    private bool _gettingNextPokemon = false;

    private async Task NextPokemon(bool force)
    {
        if (!IsComplete())
        {
            return;
        }

        if (_gettingNextPokemon && !force)
        {
            // If we are already getting the next pokemon, we do not do anything.
            return;
        }

        _gettingNextPokemon = true;

        var pokemonId = rnd.Next(1, maxPokemonId);
        var pokemon = await pokeApiClient.GetResourceAsync<Pokemon>(pokemonId);

        if (pokemon is null)
        {
            // If the pokemon is null, we try again to get a valid pokemon.
            await NextPokemon(true);

            return;
        }

        GuessedTypes.Clear();

        UpdateSelectedPokemon(pokemon);

        _gettingNextPokemon = false;
    }

    private void GiveUp()
    {
        if (IsComplete())
        {
            return;
        }

        foreach(var type in TypeColorDictionary.Keys)
        {
            if (!GuessedTypes.Contains(type))
            {
                GuessedTypes.Add(type);
            }
        }
    }   

    private void UpdateSelectedPokemon(Pokemon pokemon)
    {
        SelectedPokemon = pokemon;
        SelectedPokemonName = $"#{pokemon.Id:0000} {pokemon.Name.ToUpperInvariant()}";
        SelectedPokemonImageUrl = pokemon.Sprites.Other.OfficialArtwork.FrontDefault;
        SelectedPokemonType1 = pokemon.Types.Count > 0 ? pokemon.Types[0].Type.Name.ToUpperInvariant() : null;
        SelectedPokemonType2 = pokemon.Types.Count > 1 ? pokemon.Types[1].Type.Name.ToUpperInvariant() : null;
    }

    private void GuessType(string type)
    {
        if (IsComplete())
        {
            return;
        }

        if (!GuessedTypes.Contains(type))
        {
            GuessedTypes.Add(type);
        }
    }

    private string GetTypeStyle(string type)
    {
        return $"background-color: {TypeColorDictionary[type]}";
    }

    private string GetTypeStylePotentiallyHidden(string? type)
    {
        if (string.IsNullOrWhiteSpace(type))
        {
            return string.Empty;
        }

        if (GuessedTypes.Contains(type))
        {
            return GetTypeStyle(type);
        }

        return "background-color: White";
    }

    private string GetTypeNamePotentiallyHidden(string? typeName, bool isType1)
    {
        if (string.IsNullOrWhiteSpace(typeName))
        {
            return string.Empty;
        }

        if (GuessedTypes.Contains(typeName))
        {
            return typeName;
        }

        if (isType1)
        {
            return "Type 1";
        }

        return "Type 2";
    }

    private string GetTypeStyleForGuessing(string type)
    {
        if (GuessedTypes.Contains(type))
        {
            var color = string.Empty;
            if((SelectedPokemonType1 is not null && SelectedPokemonType1.Equals(type, StringComparison.OrdinalIgnoreCase)) ||
                (SelectedPokemonType2 is not null && SelectedPokemonType2.Equals(type, StringComparison.OrdinalIgnoreCase)))
            {
                color = "color: lawngreen";
            }
            else
            {
                 color = "color: red";
            }
            return "background-color: white; " + color; 
        }

        return GetTypeStyle(type);
    }

    protected override async Task OnInitializedAsync()
    {
        await Init();
    }

    private async Task Init()
    {
        await NextPokemon(false);
    }
}