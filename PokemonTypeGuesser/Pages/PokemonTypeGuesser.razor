@page "/"
@using PokeApiNet

<PageTitle>Pokemon Type Guesser</PageTitle>

<style>
    body{
        background-color: palegreen;
        font-family: 'Comic Sans MS';
        overflow: auto;
    }

    .buttonClassOdd {
        background-color: red;
        color: darkgreen;
    }

    .buttonClassEven {
        background-color: darkgreen;
        color: red;
    }

    .buttonClassOdd:hover {
        background-color: yellow;
        color: black;
    }

    .buttonClassEven:hover {
        background-color: yellow;
        color: black;
    }
</style>

@if (SelectedPokemon is null)
{
    <button @onclick="@(() => NextPokemon())">
        Start
    </button>
}
else
{
    <h1>@SelectedPokemon.Name</h1>

    if(SelectedPokemonType1 is not null)
    {
        <h1>@SelectedPokemonType1.Type.Name</h1>
    }

    if (SelectedPokemonType2 is not null)
    {
        <h1>@SelectedPokemonType2.Type.Name</h1>
    }
}

@code {
    private static PokeApiClient pokeApiClient = new PokeApiClient();

    private Pokemon? SelectedPokemon;
    private PokemonType? SelectedPokemonType1;
    private PokemonType? SelectedPokemonType2;
    private static Random rnd = new Random();

    private const int maxPokemonId = 1025;

    private async Task NextPokemon()
    {
        var pokemonId = rnd.Next(1, maxPokemonId);
        var pokemon = await pokeApiClient.GetResourceAsync<Pokemon>(pokemonId);

        SelectedPokemon = pokemon;
        SelectedPokemonType1 = pokemon.Types.Count > 0 ? pokemon.Types[0] : null;
        SelectedPokemonType2 = pokemon.Types.Count > 1 ? pokemon.Types[1] : null;
    }

    protected override async Task OnInitializedAsync()
    {
        await Init();
    }

    private async Task Init()
    {
        await NextPokemon();
    }
}